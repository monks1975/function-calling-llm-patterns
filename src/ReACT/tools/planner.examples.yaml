# ~/src/ReACT/tools/planner.examples.yaml

examples:
  # Example 1: Basic use of the planner tool for a complex query
  - - role: user
      content: 'Get the GDP of the United States and then the GDP of China and compare them across the last decade.'
    - role: assistant
      content:
        thought: 'This is a complex query requiring multiple steps. I should use the Planner tool to help organize my approach.'
        action: 'Planner'
        input: '{"question": "Get the GDP of the United States and then the GDP of China and compare them across the last decade.", "current_iteration": 1, "max_iterations": 8, "previous_actions": [], "previous_thoughts": []}'

  # Example 2: Response to a planner tool observation
  - - role: user
      content: '[Tool Observation] PLANNING SUMMARY:

Original Question: "Get the GDP of the United States and then the GDP of China and compare them across the last decade."

Progress Assessment:
You have not yet taken any actions to answer the question.

Iteration Status:
- Current iteration: 1
- Maximum iterations: 8
- Remaining iterations: 7

Previous Actions Summary:
No previous actions taken.

Recent Thoughts:
No previous thoughts recorded.

Recommendations:
You have sufficient iterations remaining to explore multiple approaches if needed.'
    - role: assistant
      content:
        thought: 'Based on the planning summary, I need to start gathering data. I should first search for US GDP data over the last decade.'
        action: 'Search'
        input: '{"query": "United States GDP data last decade annual"}'

  # Example 3: Using planner after some progress
  - - role: user
      content: 'What are the top 5 most populated cities in the world and their main tourist attractions?'
    - role: assistant
      content:
        thought: 'I have already found information about 3 cities. I should use the Planner to assess my progress and plan the remaining steps.'
        action: 'Planner'
        input: '{"question": "What are the top 5 most populated cities in the world and their main tourist attractions?", "current_iteration": 4, "max_iterations": 10, "previous_actions": [{"action": "Search", "input": {"query": "top 5 most populated cities in the world"}, "observation": "The top 5 most populated cities are: 1. Tokyo, Japan, 2. Delhi, India, 3. Shanghai, China, 4. São Paulo, Brazil, 5. Mexico City, Mexico"}, {"action": "Search", "input": {"query": "Tokyo main tourist attractions"}, "observation": "Main tourist attractions in Tokyo: Tokyo Skytree, Senso-ji Temple, Meiji Shrine, Tokyo Disneyland, Imperial Palace"}, {"action": "Search", "input": {"query": "Delhi main tourist attractions"}, "observation": "Main tourist attractions in Delhi: Red Fort, India Gate, Qutub Minar, Humayun''s Tomb, Lotus Temple"}], "previous_thoughts": ["I need to find the top 5 most populated cities in the world.", "Now I need to find tourist attractions for each city, starting with Tokyo.", "Next, I''ll find tourist attractions for Delhi."]}'

  # Example 4: Response to planner when iterations are running low
  - - role: user
      content: |
        [Tool Observation] PLANNING SUMMARY:

        Original Question: "What are the top 5 most populated cities in the world and their main tourist attractions?"

        Progress Assessment:
        You appear to be making good progress toward answering the question.

        Iteration Status:
        - Current iteration: 8
        - Maximum iterations: 10
        - Remaining iterations: 2

        Previous Actions Summary:
        - Used Search with input: {"query": "top 5 most populated cities in the world"}
        - Used Search with input: {"query": "Tokyo main tourist attractions"}
        - Used Search with input: {"query": "Delhi main tourist attractions"}
        - Used Search with input: {"query": "Shanghai main tourist attractions"}
        - Used Search with input: {"query": "São Paulo main tourist attractions"}
        - Used Search with input: {"query": "Mexico City main tourist attractions"}

        Recent Thoughts:
        "I need to find the top 5 most populated cities in the world."
        "Now I need to find tourist attractions for each city, starting with Tokyo."
        "I've gathered information about all 5 cities and their attractions."

        Recommendations:
        You have limited iterations remaining. Focus on the most promising path to an answer.
    - role: assistant
      content:
        thought: 'According to the planning summary, I have limited iterations remaining but have already gathered all the necessary information about the 5 cities and their attractions. I should provide a final answer now.'
        final_answer: "The top 5 most populated cities in the world and their main tourist attractions are:\n\n1. Tokyo, Japan: Tokyo Skytree, Senso-ji Temple, Meiji Shrine, Tokyo Disneyland, Imperial Palace\n2. Delhi, India: Red Fort, India Gate, Qutub Minar, Humayun's Tomb, Lotus Temple\n3. Shanghai, China: The Bund, Yu Garden, Shanghai Tower, Nanjing Road, Shanghai Disneyland\n4. São Paulo, Brazil: Ibirapuera Park, São Paulo Museum of Art, Municipal Market, Paulista Avenue, Pinacoteca\n5. Mexico City, Mexico: Zócalo, Frida Kahlo Museum, Chapultepec Castle, National Museum of Anthropology, Templo Mayor"

  # Example 5: Using planner when approach needs to be changed
  - - role: user
      content: 'What is the most efficient algorithm for solving the traveling salesman problem?'
    - role: assistant
      content:
        thought: 'I''ve been searching for specific algorithms but haven''t found a comprehensive answer. Let me use the Planner to reassess my approach.'
        action: 'Planner'
        input: '{"question": "What is the most efficient algorithm for solving the traveling salesman problem?", "current_iteration": 3, "max_iterations": 6, "previous_actions": [{"action": "Search", "input": {"query": "most efficient algorithm traveling salesman problem"}, "observation": "The traveling salesman problem is NP-hard, meaning there is no known polynomial-time algorithm to solve it optimally for all cases."}, {"action": "Search", "input": {"query": "traveling salesman problem exact algorithms"}, "observation": "Exact algorithms for TSP include branch and bound, dynamic programming, and integer linear programming, but they all have exponential time complexity."}], "previous_thoughts": ["I need to find information about efficient algorithms for the traveling salesman problem.", "The first search indicates there''s no polynomial-time algorithm. I should look for the best known approaches."]}'
