/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/docs/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["docs_schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/chunks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_chunks_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/chunks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_chunks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/chunks/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search for chunks using text embeddings. */
        get: operations["documents_chunks_search_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_documents_list"];
        put?: never;
        post: operations["documents_documents_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/documents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_documents_retrieve"];
        put: operations["documents_documents_update"];
        post?: never;
        delete: operations["documents_documents_destroy"];
        options?: never;
        head?: never;
        patch: operations["documents_documents_partial_update"];
        trace?: never;
    };
    "/api/documents/libraries/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete all documents in a library
         * @description Delete all documents with a given library.
         */
        delete: operations["documents_libraries_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/parsed-documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_parsed_documents_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/parsed-documents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_parsed_documents_retrieve"];
        put: operations["documents_parsed_documents_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["documents_parsed_documents_partial_update"];
        trace?: never;
    };
    "/api/documents/pipelines/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_pipelines_list"];
        put?: never;
        post: operations["documents_pipelines_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/pipelines/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documents_pipelines_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/pipelines/unique/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Retrieve the specified pipeline, or create it if it doesn't exist.
         *
         *     Responds with status 200 if the pipeline existed, or 201 if it was newly
         *     created. */
        post: operations["documents_pipelines_unique_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Chunk: {
            readonly id: number;
            readonly pipeline: number;
            readonly order: number;
            readonly text: string;
        };
        /**
         * @description * `DOCLING` - Docling
         *     * `CHARS_100` - Fixed size (100 chars)
         *     * `CHARS_200` - Fixed size (200 chars)
         *     * `CHARS_400` - Fixed size (400 chars)
         *     * `HEADINGS` - Headings
         * @enum {string}
         */
        ChunkerEnum: "DOCLING" | "CHARS_100" | "CHARS_200" | "CHARS_400" | "HEADINGS";
        Document: {
            readonly id: number;
            name: string;
            /** Format: uuid */
            library: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Format: uri */
            file: string;
            file_format: components["schemas"]["FileFormatEnum"];
        };
        /**
         * @description * `TEXT` - Text
         *     * `MARK` - Markdown
         *     * `HTML` - HTML
         *     * `CSV` - CSV
         *     * `JSON` - JSON
         *     * `XML` - XML
         *     * `PDF` - PDF
         *     * `EPUB` - EPUB
         *     * `MOBI` - MOBI
         *     * `XPS` - Microsoft XPS
         *     * `FB2` - FictionBook 2
         *     * `CBZ` - Comic book archive
         *     * `DOC` - Doc (.doc)
         *     * `DOCX` - DocX (.docx)
         *     * `PPT` - PowerPoint (.ppt)
         *     * `PPTX` - PowerPoint (.pptx)
         *     * `XLSX` - Excel (xlsx)
         * @enum {string}
         */
        FileFormatEnum: "TEXT" | "MARK" | "HTML" | "CSV" | "JSON" | "XML" | "PDF" | "EPUB" | "MOBI" | "XPS" | "FB2" | "CBZ" | "DOC" | "DOCX" | "PPT" | "PPTX" | "XLSX";
        PaginatedChunkList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Chunk"][];
        };
        PaginatedDocumentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Document"][];
        };
        PaginatedParsedDocumentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ParsedDocument"][];
        };
        PaginatedPipelineList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Pipeline"][];
        };
        ParsedDocument: {
            readonly id: number;
            readonly pipeline: number;
            markdown?: string;
            metadata?: unknown;
            /** Format: date-time */
            readonly created_at: string;
        };
        /**
         * @description * `NONE` - None (plaintext)
         *     * `DOCLING` - Docling
         *     * `PYMUPDF` - PyMuPDF
         *     * `MARKITDOWN` - MarkItDown
         * @enum {string}
         */
        ParserEnum: "NONE" | "DOCLING" | "PYMUPDF" | "MARKITDOWN";
        PatchedDocument: {
            readonly id?: number;
            name?: string;
            /** Format: uuid */
            library?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            /** Format: uri */
            file?: string;
            file_format?: components["schemas"]["FileFormatEnum"];
        };
        PatchedParsedDocument: {
            readonly id?: number;
            readonly pipeline?: number;
            markdown?: string;
            metadata?: unknown;
            /** Format: date-time */
            readonly created_at?: string;
        };
        Pipeline: {
            readonly id: number;
            status?: components["schemas"]["StatusEnum"];
            document: number;
            parser: components["schemas"]["ParserEnum"];
            chunker: components["schemas"]["ChunkerEnum"];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `PENDING` - Pending
         *     * `PARSED` - Parsed
         *     * `CHUNKED` - Chunked
         *     * `EMBEDDED` - Embedded
         * @enum {string}
         */
        StatusEnum: "PENDING" | "PARSED" | "CHUNKED" | "EMBEDDED";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    docs_schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    documents_chunks_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                pipeline?: number;
                pipeline__document?: number;
                pipeline__document__library?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedChunkList"];
                };
            };
        };
    };
    documents_chunks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this chunk. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Chunk"];
                };
            };
        };
    };
    documents_chunks_search_list: {
        parameters: {
            query: {
                /** @description Distance type */
                distance?: "cosine-distance";
                /** @description A page number within the paginated result set. */
                page?: number;
                pipeline?: number;
                pipeline__document?: number;
                pipeline__document__library?: string;
                /** @description Search query */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedChunkList"];
                };
            };
        };
    };
    documents_documents_list: {
        parameters: {
            query?: {
                library?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumentList"];
                };
            };
        };
    };
    documents_documents_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Document"];
                "application/x-www-form-urlencoded": components["schemas"]["Document"];
                "multipart/form-data": components["schemas"]["Document"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_documents_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_documents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Document"];
                "application/x-www-form-urlencoded": components["schemas"]["Document"];
                "multipart/form-data": components["schemas"]["Document"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_documents_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_documents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDocument"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDocument"];
                "multipart/form-data": components["schemas"]["PatchedDocument"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_libraries_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_parsed_documents_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedParsedDocumentList"];
                };
            };
        };
    };
    documents_parsed_documents_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parsed document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParsedDocument"];
                };
            };
        };
    };
    documents_parsed_documents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parsed document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ParsedDocument"];
                "application/x-www-form-urlencoded": components["schemas"]["ParsedDocument"];
                "multipart/form-data": components["schemas"]["ParsedDocument"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParsedDocument"];
                };
            };
        };
    };
    documents_parsed_documents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parsed document. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedParsedDocument"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedParsedDocument"];
                "multipart/form-data": components["schemas"]["PatchedParsedDocument"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParsedDocument"];
                };
            };
        };
    };
    documents_pipelines_list: {
        parameters: {
            query?: {
                /** @description * `DOCLING` - Docling
                 *     * `CHARS_100` - Fixed size (100 chars)
                 *     * `CHARS_200` - Fixed size (200 chars)
                 *     * `CHARS_400` - Fixed size (400 chars)
                 *     * `HEADINGS` - Headings */
                chunker?: "CHARS_100" | "CHARS_200" | "CHARS_400" | "DOCLING" | "HEADINGS";
                created_by?: number;
                document?: number;
                document__library?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description * `NONE` - None (plaintext)
                 *     * `DOCLING` - Docling
                 *     * `PYMUPDF` - PyMuPDF
                 *     * `MARKITDOWN` - MarkItDown */
                parser?: "DOCLING" | "MARKITDOWN" | "NONE" | "PYMUPDF";
                /** @description * `PENDING` - Pending
                 *     * `PARSED` - Parsed
                 *     * `CHUNKED` - Chunked
                 *     * `EMBEDDED` - Embedded */
                status?: "CHUNKED" | "EMBEDDED" | "PARSED" | "PENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPipelineList"];
                };
            };
        };
    };
    documents_pipelines_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Pipeline"];
                "application/x-www-form-urlencoded": components["schemas"]["Pipeline"];
                "multipart/form-data": components["schemas"]["Pipeline"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
        };
    };
    documents_pipelines_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this pipeline. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
        };
    };
    documents_pipelines_unique_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Pipeline"];
                "application/x-www-form-urlencoded": components["schemas"]["Pipeline"];
                "multipart/form-data": components["schemas"]["Pipeline"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
        };
    };
}
