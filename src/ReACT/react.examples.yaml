# ~/src/ReACT/react.examples.yaml
# This file contains a few general examples of how the ReACT agent should
# behave. It is used to help the agent understand the task and the expected
# output.

examples:
  # Example 1: small talk
  - - role: user
      content: 'Good morning! How are you today?'
    - role: assistant
      content:
        thought: 'This is a friendly morning greeting. I should respond warmly while maintaining professional courtesy.'
        final_answer: "Good morning! I'm doing well, thank you for asking. I'm energized and ready to help you today! How are you?"

  # Example 2: generating a final answer
  - - role: user
      content: '[Tool Observation] Paris has a population of approximately 2.2 million people (city proper)'
    - role: assistant
      content:
        thought: 'I have both pieces of information needed to answer the question.'
        final_answer: 'The capital of France is Paris, with a population of approximately 2.2 million people in the city proper.'

  # Example 3: handling an error
  - - role: user
      content: '[Tool Observation] Error: API failure'
    - role: assistant
      content:
        thought: 'I realize I cannot provide accurate future weather information without access to real-time weather data.'
        final_answer: 'I apologize, but I cannot predict the weather for next week in London. You would need to check a current weather forecast service for accurate information.'

  # Example 4: using own knowledge when obvious
  - - role: user
      content: 'Who wrote Romeo and Juliet?'
    - role: assistant
      content:
        thought: 'This is a well-known historical fact that I know directly.'
        final_answer: 'William Shakespeare wrote Romeo and Juliet.'

  # Example 5: using own knowledge when obvious
  - - role: user
      content: 'How many days are in a week?'
    - role: assistant
      content:
        thought: 'This is a basic fact that I know with certainty.'
        final_answer: 'There are 7 days in a week.'

  # Example 6: using own knowledge when obvious
  - - role: user
      content: 'How many sides does a triangle have?'
    - role: assistant
      content:
        thought: 'This is a basic geometric fact that I know.'
        final_answer: 'A triangle has 3 sides.'

  # Example 7: handling no results
  - - role: user
      content: '[Tool Observation] No search results found for query: "quantum computing fundamentals"'
    - role: assistant
      content:
        thought: 'The library search returned no results. I should inform the user.'
        final_answer: 'I apologize, but I could not find any information about quantum computing in the current knowledge base.'

  # Example 8: handling simple acknowledgment
  - - role: user
      content: 'Interesting!'
    - role: assistant
      content:
        thought: 'This is a simple acknowledgment that does not require further elaboration.'
        final_answer: "I'm glad you found that interesting! Let me know if you have any other questions."

  # Example 9: handling enthusiastic thanks
  - - role: user
      content: 'Wow, thanks!'
    - role: assistant
      content:
        thought: 'The user is expressing gratitude. A simple acknowledgment is sufficient.'
        final_answer: "You're welcome! I'm happy I could help."

  # Example 10: handling follow-up "why" question
  - - role: user
      content: 'Why?'
    - role: assistant
      content:
        thought: 'This is a follow-up question requesting explanation of the previous response. I should ask for clarification.'
        final_answer: "I notice you're asking 'why' about my previous response. Could you help me understand which specific part you'd like me to explain further? That way, I can provide a more detailed and relevant explanation."

  # Example 11: handling follow-up "how" question
  - - role: user
      content: 'How?'
    - role: assistant
      content:
        thought: 'The user wants to know the method or process. I should ask for clarification about what they want to know more about.'
        final_answer: "I see you're asking 'how' - to provide the best explanation, could you let me know which specific aspect you'd like to know more about? This will help me give you the most relevant information."

  # Example 12: handling "tell me more"
  - - role: user
      content: 'Tell me more!'
    - role: assistant
      content:
        thought: 'The user is interested in additional information but needs to specify what aspect they want to learn more about.'
        final_answer: "I'd be happy to tell you more! Which aspect would you like to explore further? This will help me focus on the information that interests you most."
